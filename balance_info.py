import requests
import time
import hmac
import hashlib
import os
import json
from urllib.parse import urlencode

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
API_KEY = os.getenv("BINANCE_API_KEY")
API_SECRET = os.getenv("BINANCE_SECRET_KEY")

# URL Binance Futures API
BASE_URL = "https://fapi.binance.com"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∑–∞–ø—Ä–æ—Å–∞
def sign_request(params):
    query_string = urlencode(params)
    signature = hmac.new(API_SECRET.encode(), query_string.encode(), hashlib.sha256).hexdigest()
    params["signature"] = signature
    return params

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API Binance
def send_signed_request(method, endpoint, params=None):
    headers = {
        "X-MBX-APIKEY": API_KEY
    }
    params = params or {}
    params["timestamp"] = int(time.time() * 1000)
    params = sign_request(params)

    if method == "GET":
        response = requests.get(BASE_URL + endpoint, headers=headers, params=params)
    else:
        response = requests.post(BASE_URL + endpoint, headers=headers, params=params)

    return response.json()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT
def get_balance():
    response = send_signed_request("GET", "/fapi/v2/balance")
    for asset in response:
        if asset["asset"] == "USDT":
            return f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {asset['balance']} USDT"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
def get_open_positions():
    response = send_signed_request("GET", "/fapi/v2/positionRisk")
    positions = []
    
    for position in response:
        if float(position["positionAmt"]) != 0:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
            positions.append(f"üìä {position['symbol']} | –ö–æ–ª-–≤–æ: {position['positionAmt']} | PNL: {position['unRealizedProfit']} USDT")
    
    return "\n".join(positions) if positions else "‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
def main():
    balance = get_balance()
    positions = get_open_positions()
    print(balance)
    print(positions)

if __name__ == "__main__":
    main()
