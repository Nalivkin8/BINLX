import websocket
import json
import asyncio
import pandas as pd
import time
from aiogram.exceptions import TelegramRetryAfter

# –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
active_trades = {}  # {"TSTUSDT": {"signal": "LONG", "entry": 5.50, "tp": 6.05, "sl": 5.23}}
price_history = {"TSTUSDT": [], "IPUSDT": [], "ADAUSDT": []}
last_signal_time = {}  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Binance Futures
async def start_futures_websocket(bot, chat_id):
    loop = asyncio.get_event_loop()
    ws = websocket.WebSocketApp(
        "wss://fstream.binance.com/ws",
        on_message=lambda ws, msg: loop.create_task(process_futures_message(bot, chat_id, msg)),
        on_open=on_open
    )
    await asyncio.to_thread(ws.run_forever)

# –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–∞—Ä—ã
def on_open(ws):
    subscribe_message = json.dumps({
        "method": "SUBSCRIBE",
        "params": ["tstusdt@trade", "ipusdt@trade", "adausdt@trade"],
        "id": 1
    })
    ws.send(subscribe_message)
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ WebSocket Binance Futures")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Binance WebSocket
async def process_futures_message(bot, chat_id, message):
    global active_trades, price_history, last_signal_time
    try:
        data = json.loads(message)

        if 's' in data and 'p' in data:
            symbol = data['s']
            price = float(data['p'])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏
            if symbol in active_trades:
                trade = active_trades[symbol]

                if (trade["signal"] == "LONG" and price >= trade["tp"]) or (trade["signal"] == "SHORT" and price <= trade["tp"]):
                    await send_message_safe(bot, chat_id, f"üéØ **{symbol} –¥–æ—Å—Ç–∏–≥ Take Profit ({trade['tp']} USDT, +{trade['tp_percent']}%)**")
                    del active_trades[symbol]

                elif (trade["signal"] == "LONG" and price <= trade["sl"]) or (trade["signal"] == "SHORT" and price >= trade["sl"]):
                    await send_message_safe(bot, chat_id, f"‚õî **{symbol} –¥–æ—Å—Ç–∏–≥ Stop Loss ({trade['sl']} USDT, -{trade['sl_percent']}%)**")
                    del active_trades[symbol]

                return  # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞, –¥–∞–ª—å—à–µ –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω
            if symbol in price_history:
                price_history[symbol].append(price)

                if len(price_history[symbol]) > 200:
                    price_history[symbol].pop(0)

                    df = pd.DataFrame(price_history[symbol], columns=['close'])
                    atr = compute_atr(df)
                    last_price = df['close'].iloc[-1]

                    # –ì–∏–±–∫–∏–µ TP –∏ SL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ATR –∏ —Ç—Ä–µ–Ω–¥–∞
                    tp_percent = round(10 + atr * 2, 1)  # –ú–∏–Ω–∏–º—É–º 10%, –Ω–æ —Ä–∞—Å—Ç—ë—Ç —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
                    sl_percent = round(5 + atr, 1)  # –ú–∏–Ω–∏–º—É–º 5%, –Ω–æ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç ATR

                    signal = None
                    if last_price > df['close'].mean() and atr > 0.05:
                        signal = "LONG"
                    elif last_price < df['close'].mean() and atr > 0.05:
                        signal = "SHORT"

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∞–º–∞
                    if signal and (symbol not in last_signal_time or time.time() - last_signal_time[symbol] > 60):
                        entry_price = last_price
                        tp = round(entry_price * (1 + tp_percent / 100), 5) if signal == "LONG" else round(entry_price * (1 - tp_percent / 100), 5)
                        sl = round(entry_price * (1 - sl_percent / 100), 5) if signal == "LONG" else round(entry_price * (1 + sl_percent / 100), 5)

                        active_trades[symbol] = {
                            "signal": signal, "entry": entry_price, "tp": tp, "sl": sl,
                            "tp_percent": tp_percent, "sl_percent": sl_percent
                        }
                        last_signal_time[symbol] = time.time()

                        message = (
                            f"üìå **–°–∏–≥–Ω–∞–ª –Ω–∞ {signal} {symbol} (Futures)**\n"
                            f"üîπ **–í—Ö–æ–¥**: {entry_price} USDT\n"
                            f"üéØ **TP**: {tp} USDT | +{tp_percent}%\n"
                            f"‚õî **SL**: {sl} USDT | -{sl_percent}%"
                        )
                        await send_message_safe(bot, chat_id, message)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async def send_message_safe(bot, chat_id, message):
    try:
        await bot.send_message(chat_id, message)
    except TelegramRetryAfter as e:
        print(f"‚è≥ Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É, –∂–¥–µ–º {e.retry_after} —Å–µ–∫...")
        await asyncio.sleep(e.retry_after)
        await send_message_safe(bot, chat_id, message)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ ATR (–≥–∏–±–∫–∏–π Stop Loss)
def compute_atr(df, period=14):
    high = df['close'].shift(1)
    low = df['close'].shift(-1)
    tr = abs(high - low)
    atr = tr.rolling(window=period).mean()
    return atr.iloc[-1] if not atr.empty else 0.05  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ATR

