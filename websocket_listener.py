import websocket
import json
import asyncio
import pandas as pd
import time
from aiogram.exceptions import TelegramRetryAfter

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤
last_sent_time = 0
last_signal = {}
price_history = {"TSTUSDT": [], "IPUSDT": []}  # –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã –æ—Ç–¥–µ–ª—å–Ω–æ

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Binance Futures
async def start_futures_websocket(bot, chat_id):
    loop = asyncio.get_event_loop()
    ws = websocket.WebSocketApp(
        "wss://fstream.binance.com/ws",
        on_message=lambda ws, msg: loop.create_task(process_futures_message(bot, chat_id, msg)),
        on_open=on_open
    )
    await asyncio.to_thread(ws.run_forever)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è WebSocket
async def process_futures_message(bot, chat_id, message):
    global last_sent_time, last_signal, price_history
    try:
        data = json.loads(message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Ç—Ä–µ–π–¥-—Å–æ–æ–±—â–µ–Ω–∏–µ
        if 's' in data and 'p' in data:
            symbol = data['s']  # TSTUSDT –∏–ª–∏ IPUSDT
            price = float(data['p'])

            if symbol in price_history:
                price_history[symbol].append(price)

                # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ 50 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω
                if len(price_history[symbol]) > 50:
                    price_history[symbol].pop(0)

                    df = pd.DataFrame(price_history[symbol], columns=['close'])
                    df['SMA_50'] = df['close'].rolling(window=50).mean()
                    df['RSI'] = compute_rsi(df['close'])
                    df['MACD'], df['Signal_Line'] = compute_macd(df['close'])

                    last_rsi = df['RSI'].iloc[-1]
                    last_macd = df['MACD'].iloc[-1]
                    last_signal_line = df['Signal_Line'].iloc[-1]

                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                    signal = None
                    if last_rsi < 30 and last_macd > last_signal_line:
                        signal = "LONG"
                    elif last_rsi > 70 and last_macd < last_signal_line:
                        signal = "SHORT"

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π –∏ –ø—Ä–æ—à–ª–æ >3 –º–∏–Ω—É—Ç
                    current_time = time.time()
                    if signal and (last_signal.get(symbol) != signal or current_time - last_sent_time > 180):
                        last_signal[symbol] = signal
                        last_sent_time = current_time
                        take_profit = round(price * 1.02, 2)  # +2% –æ—Ç —Ü–µ–Ω—ã
                        stop_loss = round(price * 0.98, 2)   # -2% –æ—Ç —Ü–µ–Ω—ã
                        message = (
                            f"üìå **–°–∏–≥–Ω–∞–ª –Ω–∞ {signal} {symbol} (Futures)**\n"
                            f"üîπ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞**: {price} USDT\n"
                            f"üéØ **Take Profit**: {take_profit} USDT\n"
                            f"‚õî **Stop Loss**: {stop_loss} USDT\n"
                            f"üìä **RSI**: {round(last_rsi, 2)}\n"
                            f"üìä **MACD**: {round(last_macd, 2)} / {round(last_signal_line, 2)}"
                        )
                        await send_message_safe(bot, chat_id, message)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–∏–∑–±–µ–≥–∞–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ Telegram)
async def send_message_safe(bot, chat_id, message):
    try:
        await bot.send_message(chat_id, message)
    except TelegramRetryAfter as e:
        print(f"‚ö†Ô∏è Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.retry_after} —Å–µ–∫—É–Ω–¥. –û–∂–∏–¥–∞–µ–º...")
        await asyncio.sleep(e.retry_after)
        await bot.send_message(chat_id, message)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ RSI
def compute_rsi(prices, period=14):
    delta = prices.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ MACD
def compute_macd(prices, short_window=12, long_window=26, signal_window=9):
    short_ema = prices.ewm(span=short_window, adjust=False).mean()
    long_ema = prices.ewm(span=long_window, adjust=False).mean()
    macd = short_ema - long_ema
    signal_line = macd.ewm(span=signal_window, adjust=False).mean()
    return macd, signal_line

# –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ WebSocket Binance Futures
def on_open(ws):
    subscribe_message = json.dumps({
        "method": "SUBSCRIBE",
        "params": ["tstusdt@trade", "ipusdt@trade"],
        "id": 1
    })
    ws.send(subscribe_message)
