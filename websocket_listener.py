import websocket
import json
import asyncio
import time

last_sent_price = None
last_sent_time = 0

async def process_futures_message(bot, chat_id, message):
    global last_sent_price, last_sent_time
    try:
        data = json.loads(message)
        price = float(data.get('p', 0))  # –ò—Å–ø–æ–ª—å–∑—É–µ–º get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫—É—Ä—Å —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if price > 0 and (last_sent_price is None or abs(price - last_sent_price) > 5):  
            current_time = time.time()
            if current_time - last_sent_time >= 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ 10 —Å–µ–∫—É–Ω–¥
                last_sent_price = price
                last_sent_time = current_time
                await bot.send_message(chat_id, f"üî• –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC/USDT (Futures): {price}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")
