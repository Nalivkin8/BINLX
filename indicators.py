import websocket
import json
import asyncio
import time

last_sent_price = None
last_sent_time = 0

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket Binance Futures
async def start_futures_websocket(bot, chat_id):
    loop = asyncio.get_event_loop()
    ws = websocket.WebSocketApp(
        "wss://fstream.binance.com/ws/btcusdt@trade",
        on_message=lambda ws, msg: loop.create_task(process_futures_message(bot, chat_id, msg)),
        on_open=on_open
    )

    await asyncio.to_thread(ws.run_forever)

# –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã Telegram –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
async def process_futures_message(bot, chat_id, message):
    global last_sent_price, last_sent_time
    try:
        data = json.loads(message)
        price = float(data.get('p', 0))  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ 'p' –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫—É—Ä—Å —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if price > 0 and (last_sent_price is None or abs(price - last_sent_price) > 5):
            current_time = time.time()
            if current_time - last_sent_time >= 10:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª 10 —Å–µ–∫
                last_sent_price = price
                last_sent_time = current_time
                await bot.send_message(chat_id, f"üî• –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC/USDT (Futures): {price}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ Binance WebSocket
def on_open(ws):
    subscribe_message = json.dumps({
        "method": "SUBSCRIBE",
        "params": ["btcusdt@trade"],
        "id": 1
    })
    ws.send(subscribe_message)
