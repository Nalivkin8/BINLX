import os
import asyncio
from aiogram import Bot, Dispatcher
from indicators import get_futures_data, compute_indicators, generate_signal
from websocket_listener import start_futures_websocket

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Railway Variables)
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Telegram
async def send_signal(signal, price, take_profit, stop_loss):
    message = (
        f"üìå **–°–∏–≥–Ω–∞–ª –Ω–∞ {signal} (Futures) BTC/USDT**\n"
        f"üîπ **–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞**: {price} USDT\n"
        f"üéØ **Take Profit**: {take_profit} USDT\n"
        f"‚õî **Stop Loss**: {stop_loss} USDT\n"
    )
    await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")

# –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
async def check_futures_market():
    while True:
        df = get_futures_data("BTCUSDT")
        if df.empty:
            print("‚ö†Ô∏è Binance Futures API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        else:
            df = compute_indicators(df)
            signal, price, take_profit, stop_loss = generate_signal(df)
            if signal:
                await send_signal(signal, price, take_profit, stop_loss)

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def main():
    asyncio.create_task(start_futures_websocket(bot, CHAT_ID))  # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket
    asyncio.create_task(check_futures_market())  # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
