import os
import asyncio
from aiogram import Bot, Dispatcher, Router
from aiogram.types import Message

from indicators import get_historical_data, compute_indicators, generate_signal

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ –∏–∑ Railway Variables
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()
router = Router()  # –°–æ–∑–¥–∞–µ–º router

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
async def send_signal(signal, price):
    message = f"üìå **–°–∏–≥–Ω–∞–ª –Ω–∞ {signal} BTC/USDT**\nüîπ **–¶–µ–Ω–∞**: {price} USDT"
    await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä—ã–Ω–æ–∫ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
async def check_market():
    while True:
        df = get_historical_data("BTCUSDT")
        df = compute_indicators(df)
        signal, price = generate_signal(df)

        if signal:
            await send_signal(signal, price)

        await asyncio.sleep(60)  # –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message()
async def start_handler(message: Message):
    await message.answer("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ä—ã–Ω–æ–∫!")

async def main():
    dp.include_router(router)  # –î–æ–±–∞–≤–ª—è–µ–º router
    await bot.delete_webhook(drop_pending_updates=True)
    asyncio.create_task(check_market())  # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
