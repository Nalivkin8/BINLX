import websocket
import json
import asyncio
import os
import pandas as pd
from aiogram import Bot, Dispatcher
from aiogram.exceptions import TelegramRetryAfter

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –∏–∑ Railway Variables
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

if not TELEGRAM_CHAT_ID:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ Railway Variables!")

# üîπ –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# üîπ –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–µ–Ω–¥–∞
active_trades = {}
price_history = {"TSTUSDT": [], "IPUSDT": [], "ADAUSDT": [], "ETHUSDT": []}
trend_history = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç—Ä–µ–Ω–¥–∞ {"TSTUSDT": "LONG"}

# üîπ –ó–∞–ø—É—Å–∫ WebSocket
async def start_futures_websocket():
    print("üîÑ –ó–∞–ø—É—Å–∫ WebSocket Binance Futures...")
    loop = asyncio.get_event_loop()
    ws = websocket.WebSocketApp(
        "wss://fstream.binance.com/ws",
        on_message=lambda ws, msg: loop.create_task(process_futures_message(msg)),
        on_open=on_open
    )
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket...")
    await asyncio.to_thread(ws.run_forever)

# üîπ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Binance Futures
def on_open(ws):
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket!")
    subscribe_message = json.dumps({
        "method": "SUBSCRIBE",
        "params": ["tstusdt@trade", "ipusdt@trade", "adausdt@trade", "ethusdt@trade"],
        "id": 1
    })
    ws.send(subscribe_message)
    print("üì© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Binance Futures")

# üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º WebSocket-—Å–æ–æ–±—â–µ–Ω–∏—è
async def process_futures_message(message):
    global active_trades, price_history, trend_history
    try:
        data = json.loads(message)

        if 's' in data and 'p' in data:
            symbol = data['s']
            price = float(data['p'])

            # üîπ –§–∏–ª—å—Ç—Ä –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if price <= 0.0:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {symbol} –ø–æ–ª—É—á–∏–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É ({price} USDT), –ø—Ä–æ–ø—É—Å–∫...")
                return

            print(f"üìä {symbol}: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {price} USDT")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TP/SL
            if symbol in active_trades:
                trade = active_trades[symbol]

                if price >= trade["tp"] or price <= trade["sl"]:
                    status = "üéØ Take Profit" if price >= trade["tp"] else "‚õî Stop Loss"
                    print(f"{status} {symbol} ({price} USDT)")
                    await send_message_safe(f"{status} **{symbol} ({price} USDT)**")
                    del active_trades[symbol]
                    return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
            if symbol in price_history:
                price_history[symbol].append(price)

                if len(price_history[symbol]) > 50:
                    price_history[symbol].pop(0)

                df = pd.DataFrame(price_history[symbol], columns=['close'])
                df['ATR'] = compute_atr(df)
                df['RSI'] = compute_rsi(df['close'])
                df['MACD'], df['Signal_Line'] = compute_macd(df['close'])
                df['ADX'] = compute_adx(df)

                last_rsi = df['RSI'].iloc[-1]
                last_macd = df['MACD'].iloc[-1]
                last_signal_line = df['Signal_Line'].iloc[-1]
                last_adx = df['ADX'].iloc[-1]

                # –§–∏–ª—å—Ç—Ä —Ç—Ä–µ–Ω–¥–∞
                signal = None
                if last_macd > last_signal_line and last_rsi < 55 and last_adx > 20:
                    signal = "LONG"
                elif last_macd < last_signal_line and last_rsi > 45 and last_adx > 20:
                    signal = "SHORT"

                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Å–º–µ–Ω–∞ —Ç—Ä–µ–Ω–¥–∞, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–¥–µ–ª–∫—É –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é
                if symbol in trend_history and trend_history[symbol] != signal:
                    if symbol in active_trades:
                        print(f"üîÑ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–¥–µ–ª–∫—É {symbol} –∏–∑-–∑–∞ —Å–º–µ–Ω—ã —Ç—Ä–µ–Ω–¥–∞")
                        del active_trades[symbol]  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–¥–µ–ª–∫—É

                trend_history[symbol] = signal  

                if symbol not in active_trades and signal:
                    await send_trade_signal(symbol, price, signal)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

# üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
async def send_trade_signal(symbol, price, trend):
    decimal_places = len(str(price).split(".")[-1])

    tp = round(price + (price * 0.02), decimal_places) if trend == "LONG" else round(price - (price * 0.02), decimal_places)
    sl = round(price - (price * 0.01), decimal_places) if trend == "LONG" else round(price + (price * 0.01), decimal_places)

    active_trades[symbol] = {"signal": trend, "entry": price, "tp": tp, "sl": sl}
    await send_message_safe(f"üü¢ **{trend} {symbol}**\nüîπ –í—Ö–æ–¥: {price} USDT\nüéØ TP: {tp} USDT\n‚õî SL: {sl} USDT")

# üîπ –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_message_safe(message):
    try:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
        await bot.send_message(TELEGRAM_CHAT_ID, message)
    except TelegramRetryAfter as e:
        print(f"‚è≥ Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É, –∂–¥–µ–º {e.retry_after} —Å–µ–∫...")
        await asyncio.sleep(e.retry_after)
        await send_message_safe(message)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

# üîπ –§—É–Ω–∫—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
def compute_atr(df, period=14):
    return df['close'].diff().abs().rolling(window=period).mean()

def compute_rsi(prices, period=14):
    delta = prices.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

def compute_macd(prices, short_window=12, long_window=26, signal_window=9):
    short_ema = prices.ewm(span=short_window, adjust=False).mean()
    long_ema = prices.ewm(span=long_window, adjust=False).mean()
    macd = short_ema - long_ema
    signal_line = macd.ewm(span=signal_window, adjust=False).mean()
    return macd, signal_line

def compute_adx(df, period=14):
    return df['close'].rolling(window=period).mean()

# üîπ –ó–∞–ø—É—Å–∫ WebSocket –∏ –±–æ—Ç–∞
async def main():
    print("üöÄ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç...")
    asyncio.create_task(start_futures_websocket())  
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
