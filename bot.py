import websocket
import json
import asyncio
import os
import pandas as pd
from aiogram import Bot, Dispatcher
from aiogram.exceptions import TelegramRetryAfter

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã –∏–∑ Railway Variables
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

if not TELEGRAM_CHAT_ID:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ Railway Variables!")

# üîπ –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

# üîπ –•—Ä–∞–Ω–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–¥–µ–ª–∫–∏ (–ø–æ –ø–∞—Ä–∞–º)
active_trades = {}
price_history = {
    "IPUSDT": [], "ADAUSDT": [], "ETHUSDT": [],
    "LTCUSDT": [], "ETCUSDT": []
}

# üîπ –ó–∞–ø—É—Å–∫ WebSocket
async def start_futures_websocket():
    print("üîÑ –ó–∞–ø—É—Å–∫ WebSocket Binance Futures...")
    loop = asyncio.get_event_loop()
    ws = websocket.WebSocketApp(
        "wss://fstream.binance.com/ws",
        on_message=lambda ws, msg: loop.create_task(process_futures_message(msg)),
        on_open=on_open
    )
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket...")
    await asyncio.to_thread(ws.run_forever)

# üîπ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Binance Futures
def on_open(ws):
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket!")
    subscribe_message = json.dumps({
        "method": "SUBSCRIBE",
        "params": [
            "ipusdt@trade", "adausdt@trade", "ethusdt@trade",
            "ltcusdt@trade", "etcusdt@trade"
        ],
        "id": 1
    })
    ws.send(subscribe_message)
    print("üì© –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ Binance Futures")

# üîπ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
def get_decimal_places(price):
    price_str = f"{price:.10f}".rstrip('0')
    return len(price_str.split('.')[1]) if '.' in price_str else 0

# üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ WebSocket
async def process_futures_message(message):
    global active_trades, price_history
    try:
        data = json.loads(message)

        if 's' in data and 'p' in data:
            symbol = data['s']
            price = float(data['p'])

            # üîπ –§–∏–ª—å—Ç—Ä –æ—à–∏–±–æ—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (0.0 USDT)
            if price <= 0.0:
                return

            print(f"üìä {symbol}: –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {price} USDT")

            # üìå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–∞ TP/SL
            if symbol in active_trades:
                trade = active_trades[symbol]

                # üéØ Take Profit (TP)
                if (trade["signal"] == "LONG" and price >= trade["tp"]) or (trade["signal"] == "SHORT" and price <= trade["tp"]):
                    await send_message_safe(f"‚úÖ **{symbol} –¥–æ—Å—Ç–∏–≥ Take Profit ({trade['tp']} USDT)** üéØ")
                    del active_trades[symbol]
                    return  

                # ‚õî Stop Loss (SL)
                if (trade["signal"] == "LONG" and price <= trade["sl"]) or (trade["signal"] == "SHORT" and price >= trade["sl"]):
                    await send_message_safe(f"‚ùå **{symbol} –¥–æ—Å—Ç–∏–≥ Stop Loss ({trade['sl']} USDT)** ‚õî")
                    del active_trades[symbol]
                    return  

            # **–§–∏–ª—å—Ç—Ä —Å–∏–≥–Ω–∞–ª–æ–≤** ‚Äì –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–∞—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ TP/SL
            if symbol in active_trades:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol} ‚Äì –∞–∫—Ç–∏–≤–Ω–∞—è —Å–¥–µ–ª–∫–∞ –µ—â—ë –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞")
                return  

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
            if symbol in price_history:
                price_history[symbol].append(price)

                if len(price_history[symbol]) > 50:
                    price_history[symbol].pop(0)

                    df = pd.DataFrame(price_history[symbol], columns=['close'])

                    if len(df) < 14:
                        return  

                    df['RSI'] = compute_rsi(df['close'])
                    df['MACD'], df['Signal_Line'] = compute_macd(df['close'])
                    df['ATR'] = compute_atr(df['close'])

                    last_rsi = df['RSI'].iloc[-1]
                    last_macd = df['MACD'].iloc[-1]
                    last_signal_line = df['Signal_Line'].iloc[-1]
                    last_atr = df['ATR'].iloc[-1]

                    signal = None
                    if last_macd > last_signal_line and last_rsi < 50:
                        signal = "LONG"
                    elif last_macd < last_signal_line and last_rsi > 50:
                        signal = "SHORT"

                    if signal:
                        decimal_places = get_decimal_places(price)

                        # üîπ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π TP –∏ SL –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
                        tp, sl = compute_tp_sl(price, last_atr, signal, decimal_places)

                        roi_tp = round(((tp - price) / price) * 100, 2)
                        roi_sl = round(((sl - price) / price) * 100, 2)

                        active_trades[symbol] = {"signal": signal, "entry": price, "tp": tp, "sl": sl}

                        signal_emoji = "üü¢" if signal == "LONG" else "üî¥"

                        message = (
                            f"{signal_emoji} **{signal} {symbol} (Futures)**\n"
                            f"üîπ **–í—Ö–æ–¥**: {price:.{decimal_places}f} USDT\n"
                            f"üéØ **TP**: {tp:.{decimal_places}f} USDT | ROI: {roi_tp}%\n"
                            f"‚õî **SL**: {sl:.{decimal_places}f} USDT | ROI: {roi_sl}%"
                        )
                        await send_message_safe(message)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

# üîπ –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async def send_message_safe(message):
    try:
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {message}")
        await bot.send_message(TELEGRAM_CHAT_ID, message)
    except TelegramRetryAfter as e:
        print(f"‚è≥ Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É, –∂–¥–µ–º {e.retry_after} —Å–µ–∫...")
        await asyncio.sleep(e.retry_after)
        await send_message_safe(message)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")

# üîπ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π TP –∏ SL –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR
def compute_tp_sl(price, atr, signal, decimal_places):
    tp_multiplier = 3  
    sl_multiplier = 2  
    min_step = price * 0.005  

    tp = price + max(tp_multiplier * atr, min_step) if signal == "LONG" else price - max(tp_multiplier * atr, min_step)
    sl = price - max(sl_multiplier * atr, min_step) if signal == "LONG" else price + max(sl_multiplier * atr, min_step)

    return round(tp, decimal_places), round(sl, decimal_places)

# üîπ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ MACD
def compute_macd(prices, short_window=12, long_window=26, signal_window=9):
    short_ema = prices.ewm(span=short_window, adjust=False).mean()
    long_ema = prices.ewm(span=long_window, adjust=False).mean()
    macd = short_ema - long_ema
    signal_line = macd.ewm(span=signal_window, adjust=False).mean()
    return macd, signal_line

async def main():
    print("üöÄ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç...")
    asyncio.create_task(start_futures_websocket())  
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
