import os
import asyncio
from aiogram import Bot, Dispatcher
from indicators import get_historical_data, compute_indicators, generate_signal
from websocket_listener import start_websocket
from binance.client import Client

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ Binance –∏–∑ Railway Variables
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏ Telegram
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API
client = Client(BINANCE_API_KEY, BINANCE_SECRET_KEY)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Telegram
async def send_signal(signal, price):
    message = f"üìå **–°–∏–≥–Ω–∞–ª –Ω–∞ {signal} BTC/USDT**\nüîπ **–¶–µ–Ω–∞**: {price} USDT"
    await bot.send_message(chat_id=CHAT_ID, text=message, parse_mode="Markdown")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ USDT
def get_balance():
    balance = client.get_asset_balance(asset='USDT')
    return float(balance['free']) if balance else 0.0

# –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É
def place_order(symbol, side, quantity):
    order = client.create_order(
        symbol=symbol,
        side=side,
        type='MARKET',
        quantity=quantity
    )
    return order

# –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
async def check_market():
    while True:
        df = get_historical_data("BTCUSDT")
        if df.empty:
            print("‚ö†Ô∏è Binance API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ!")
        else:
            df = compute_indicators(df)
            signal, price = generate_signal(df)
            if signal:
                await send_signal(signal, price)

                # –ü—Ä–∏–º–µ—Ä –∞–≤—Ç–æ-—Ç–æ—Ä–≥–æ–≤–ª–∏ (–º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å)
                balance = get_balance()
                if balance > 10:  # –ï—Å–ª–∏ –±–∞–ª–∞–Ω—Å > $10, –ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É
                    qty = round(10 / price, 6)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –Ω–∞ $10
                    order = place_order("BTCUSDT", "BUY" if signal == "BUY" else "SELL", qty)
                    print(f"üöÄ –°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {order}")

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä—ã–Ω–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def main():
    asyncio.create_task(start_websocket(bot, CHAT_ID))  # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket
    asyncio.create_task(check_market())  # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
