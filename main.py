import websocket
import json
import numpy as np
import matplotlib.pyplot as plt
import io
import os
from telegram import Bot

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ Railway Variables
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# üîπ Telegram-–±–æ—Ç
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# üîπ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
TRADE_PAIRS = ["btcusdt", "ethusdt", "solusdt", "xrpusdt", "adausdt", "dotusdt", "maticusdt", "bnbusdt", "linkusdt"]

# üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è RSI (–∏—Å—Ç–æ—Ä–∏—è —Å–≤–µ—á–µ–π)
candle_data = {pair: [] for pair in TRADE_PAIRS}

# üîπ Binance WebSocket URL
SOCKETS = {pair: f"wss://fstream.binance.com/ws/{pair}@kline_15m" for pair in TRADE_PAIRS}

# üîπ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ RSI
def calculate_rsi(prices, period=14):
    if len(prices) < period:
        return None
    delta = np.diff(prices)
    gain = np.where(delta > 0, delta, 0)
    loss = np.where(delta < 0, -delta, 0)
    avg_gain = np.mean(gain[-period:])
    avg_loss = np.mean(loss[-period:])
    rs = avg_gain / avg_loss if avg_loss != 0 else 0
    rsi = 100 - (100 / (1 + rs))
    return round(rsi, 2)

# üîπ –§—É–Ω–∫—Ü–∏—è —Ä–∏—Å—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ RSI + —Ü–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram
def send_chart(pair, prices, rsi):
    plt.figure(figsize=(10, 5))

    # üîπ –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
    plt.subplot(2, 1, 1)
    plt.plot(prices, label="–¶–µ–Ω–∞", color="blue")
    plt.title(f"{pair.upper()} –¶–µ–Ω–∞ –∏ RSI")
    plt.legend()

    # üîπ –ì—Ä–∞—Ñ–∏–∫ RSI
    plt.subplot(2, 1, 2)
    plt.plot(rsi, label="RSI", color="red")
    plt.axhline(30, color="green", linestyle="--")  # –õ–∏–Ω–∏—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
    plt.axhline(70, color="red", linestyle="--")  # –õ–∏–Ω–∏—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏
    plt.legend()

    # üîπ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    img_buf = io.BytesIO()
    plt.savefig(img_buf, format="png")
    img_buf.seek(0)
    bot.send_photo(chat_id=TELEGRAM_CHAT_ID, photo=img_buf)
    plt.close()

# üîπ –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö WebSocket
def on_message(ws, message, pair):
    data = json.loads(message)
    candle = data['k']
    price = float(candle['c'])  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
    is_closed = candle['x']  # True, –µ—Å–ª–∏ —Å–≤–µ—á–∞ –∑–∞–∫—Ä—ã–ª–∞—Å—å

    if is_closed:
        candle_data[pair].append(price)
        if len(candle_data[pair]) > 50:
            candle_data[pair].pop(0)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å–≤–µ—á—É

        # üìà –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI –∏ Stop-Loss/Take-Profit
        rsi = calculate_rsi(candle_data[pair])
        if rsi is not None:
            message = None
            stop_loss = round(price * 0.98, 4)  # -2% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
            take_profit = round(price * 1.02, 4)  # +2% –æ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã

            if rsi < 30:
                message = f"üöÄ –õ–æ–Ω–≥ {pair.upper()}!\n–¶–µ–Ω–∞: {price}\nRSI: {rsi} (–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)\nüîπ SL: {stop_loss} | TP: {take_profit}"
            elif rsi > 70:
                message = f"‚ö†Ô∏è –®–æ—Ä—Ç {pair.upper()}!\n–¶–µ–Ω–∞: {price}\nRSI: {rsi} (–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)\nüîπ SL: {stop_loss} | TP: {take_profit}"

            if message:
                bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
                send_chart(pair, candle_data[pair], [calculate_rsi(candle_data[pair], i) for i in range(1, len(candle_data[pair]) + 1)])

# üîπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ WebSocket –ø—Ä–∏ —Ä–∞–∑—Ä—ã–≤–µ
def connect_ws(pair):
    while True:
        try:
            ws = websocket.WebSocketApp(
                SOCKETS[pair],
                on_message=lambda ws, message: on_message(ws, message, pair),
                on_open=lambda ws: print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {pair.upper()} WebSocket"),
                on_error=lambda ws, error: print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket {pair.upper()}: {error}"),
                on_close=lambda ws, code, msg: print(f"‚ùå WebSocket –∑–∞–∫—Ä—ã—Ç {pair.upper()}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫..."),
            )
            ws.run_forever()
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ {pair.upper()}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)

# üîπ –ó–∞–ø—É—Å–∫ WebSocket –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
import threading
for pair in TRADE_PAIRS:
    thread = threading.Thread(target=connect_ws, args=(pair,))
    thread.start()

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä—ã–Ω–æ–∫ —á–µ—Ä–µ–∑ WebSocket!")
