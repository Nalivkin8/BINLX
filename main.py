import asyncio
import threading
import websocket
import json
import numpy as np
import os
import schedule
import time
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext
import ccxt  

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ Railway Variables
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–µ–π
if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
    print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã!")
    exit()
if not BINANCE_API_KEY or not BINANCE_SECRET_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: BINANCE API-–∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã!")
    exit()

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance
try:
    exchange = ccxt.binance({
        'apiKey': BINANCE_API_KEY,
        'secret': BINANCE_SECRET_KEY,
        'options': {'defaultType': 'future'}
    })
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
    exit()

# üîπ Telegram-–±–æ—Ç
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
async def send_telegram_message(text):
    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram)
asyncio.run(send_telegram_message("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"))

# üîπ Telegram-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
        [InlineKeyboardButton("üìà –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏", callback_data="positions")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

# üîπ –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞
def get_balance():
    try:
        balance_info = exchange.fetch_balance()
        balance = balance_info['total']['USDT'] if 'USDT' in balance_info['total'] else 0
        return round(balance, 2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0

def show_balance(update: Update, context: CallbackContext):
    balance = get_balance()
    update.callback_query.answer()
    update.callback_query.message.reply_text(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} USDT")

# üîπ –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
def get_open_positions():
    try:
        positions = exchange.fetch_positions()
        open_positions = [p for p in positions if float(p['contracts']) > 0]

        if not open_positions:
            return "üìå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"

        report = "üìä –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:\n"
        for pos in open_positions:
            report += f"üîπ {pos['symbol']}: {pos['side']} {pos['contracts']} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤\nPnL: {round(float(pos['unrealizedPnl']), 2)} USDT\n\n"

        return report
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π"

def show_positions(update: Update, context: CallbackContext):
    positions = get_open_positions()
    update.callback_query.answer()
    update.callback_query.message.reply_text(positions)

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
def button_click(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == "balance":
        show_balance(update, context)
    elif query.data == "positions":
        show_positions(update, context)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-—Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
updater = Updater(TELEGRAM_BOT_TOKEN, use_context=True)
dp = updater.dispatcher
dp.add_handler(CommandHandler("start", start))
dp.add_handler(CallbackQueryHandler(button_click))

# üîπ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ –ø–æ—Ç–æ–∫–µ
def run_telegram_bot():
    print("‚úÖ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    updater.start_polling()
    updater.idle()

threading.Thread(target=run_telegram_bot, daemon=True).start()

# üîπ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
TRADE_PAIRS = ["btcusdt", "ethusdt", "solusdt", "xrpusdt", "adausdt", "dotusdt", "maticusdt", "bnbusdt", "linkusdt", "ipusdt", "tstusdt"]

# üîπ –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
STREAMS = "/".join([f"{pair}@kline_15m" for pair in TRADE_PAIRS])
BINANCE_WS_URL = f"wss://fstream.binance.com/stream?streams={STREAMS}"

# üîπ WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def on_open(ws):
    print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω!")

def on_close(ws, close_status_code, close_msg):
    print("‚ùå WebSocket –∑–∞–∫—Ä—ã—Ç! –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    time.sleep(5)
    ws.run_forever()

def on_error(ws, error):
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket: {error}")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö WebSocket
def on_message(ws, message):
    data = json.loads(message)
    
    if "stream" in data and "data" in data:
        stream = data["stream"]
        pair = stream.split("@")[0].upper()
        kline = data["data"]["k"]
        price = float(kline["c"])
        is_closed = kline["x"]

        print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {pair} | –¶–µ–Ω–∞: {price}")

# üîπ –ó–∞–ø—É—Å–∫ WebSocket –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_websocket():
    ws = websocket.WebSocketApp(
        BINANCE_WS_URL,
        on_open=on_open,
        on_close=on_close,
        on_error=on_error,
        on_message=on_message
    )
    ws.run_forever()

threading.Thread(target=start_websocket, daemon=True).start()
