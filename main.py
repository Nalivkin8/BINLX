import asyncio
import websocket
import json
import numpy as np
import os
import ccxt  
from telegram import Bot, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# üîπ API-–∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ API
if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
    print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã!")
    exit()
if not BINANCE_API_KEY or not BINANCE_SECRET_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: BINANCE API-–∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã!")
    exit()

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance
try:
    exchange = ccxt.binance({
        'apiKey': BINANCE_API_KEY,
        'secret': BINANCE_SECRET_KEY,
        'options': {'defaultType': 'future'}
    })
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
    exit()

# üîπ Telegram-–±–æ—Ç
bot = Bot(token=TELEGRAM_BOT_TOKEN)

async def send_telegram_message(text):
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    print(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram: {text}")
    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)

# üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ 1 —Ä–∞–∑ (–±–µ–∑ —Å–ø–∞–º–∞)
async def startup_message():
    await send_telegram_message("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Ä—ã–Ω–æ–∫!")

async def get_balance():
    """–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞"""
    try:
        balance_info = exchange.fetch_balance()
        balance = balance_info['total'].get('USDT', 0)
        return round(balance, 2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0

async def show_balance(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ë–∞–ª–∞–Ω—Å"""
    balance = await get_balance()
    await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} USDT")

async def get_open_positions():
    """–ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    try:
        positions = exchange.fetch_positions()
        open_positions = [p for p in positions if float(p['contracts']) > 0]
        if not open_positions:
            return "üìå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"

        report = "üìä –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:\n"
        for pos in open_positions:
            report += f"üîπ {pos['symbol']}: {pos['side']} {pos['contracts']} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤\nPnL: {round(float(pos['unrealizedPnl']), 2)} USDT\n\n"
        return report
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π"

async def show_positions(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏"""
    positions = await get_open_positions()
    await update.message.reply_text(positions)

async def start(update: Update, context):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤–Ω–∏–∑—É"""
    keyboard = [
        [KeyboardButton("üìä –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìà –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_message(update: Update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text

    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        await show_balance(update, context)
    elif text == "üìà –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏":
        await show_positions(update, context)
    else:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

async def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

# üîπ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã (–¢–æ–ª—å–∫–æ ADAUSDT, IPUSDT, TSTUSDT)
TRADE_PAIRS = ["adausdt", "ipusdt", "tstusdt"]

# üîπ WebSocket URL
STREAMS = "/".join([f"{pair}@kline_15m" for pair in TRADE_PAIRS])
BINANCE_WS_URL = f"wss://fstream.binance.com/stream?streams={STREAMS}"

# üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
candle_data = {pair: [] for pair in TRADE_PAIRS}

def on_open(ws):
    print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω!")

def on_close(ws, close_status_code, close_msg):
    print("‚ùå WebSocket –∑–∞–∫—Ä—ã—Ç! –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    asyncio.run(asyncio.sleep(5))
    ws.run_forever()

def on_error(ws, error):
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket: {error}")

def calculate_rsi(prices, period=14):
    """–†–∞—Å—á—ë—Ç RSI"""
    if len(prices) < period:
        return None
    delta = np.diff(prices)
    gain = np.where(delta > 0, delta, 0)
    loss = np.where(delta < 0, -delta, 0)
    avg_gain = np.mean(gain[-period:])
    avg_loss = np.mean(loss[-period:])
    rs = avg_gain / avg_loss if avg_loss != 0 else 0
    rsi = 100 - (100 / (1 + rs))
    return round(rsi, 2)

def on_message(ws, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö WebSocket"""
    data = json.loads(message)
    
    if "stream" in data and "data" in data:
        stream = data["stream"]
        pair = stream.split("@")[0].upper()
        kline = data["data"]["k"]
        price = float(kline["c"])
        is_closed = kline["x"]

        print(f"üìä {pair} | –¶–µ–Ω–∞: {price}")

        if is_closed:
            candle_data[pair].append(price)

            if len(candle_data[pair]) > 50:
                candle_data[pair].pop(0)

            rsi = calculate_rsi(candle_data[pair])

            if rsi is not None:
                print(f"üìä {pair} RSI: {rsi}")

                if rsi < 30:
                    signal = f"üöÄ –õ–æ–Ω–≥ {pair}!\n–¶–µ–Ω–∞: {price}\nRSI: {rsi}"
                    asyncio.run(send_telegram_message(signal))
                elif rsi > 70:
                    signal = f"‚ö†Ô∏è –®–æ—Ä—Ç {pair}!\n–¶–µ–Ω–∞: {price}\nRSI: {rsi}"
                    asyncio.run(send_telegram_message(signal))

async def start_websocket():
    """–ó–∞–ø—É—Å–∫ WebSocket"""
    ws = websocket.WebSocketApp(
        BINANCE_WS_URL,
        on_open=on_open,
        on_close=on_close,
        on_error=on_error,
        on_message=on_message
    )
    ws.run_forever()

async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫"""
    await startup_message()
    asyncio.create_task(start_websocket())
    await run_telegram_bot()

if __name__ == "__main__":
    asyncio.run(main())
