import asyncio
import requests
import json
import os
import hmac
import hashlib
import time
import websocket
from urllib.parse import urlencode
from telegram import Bot, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# üîπ API-–∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# üîπ Binance API URL
BINANCE_FUTURES_URL = "https://fapi.binance.com"

# üîπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã
TRADE_PAIRS = ["ADAUSDT", "IPUSDT", "TSTUSDT"]

bot = Bot(token=TELEGRAM_BOT_TOKEN)

def sign_request(params):
    """üîπ –°–æ–∑–¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è Binance API"""
    params["timestamp"] = int(time.time() * 1000)
    query_string = urlencode(params)
    signature = hmac.new(BINANCE_SECRET_KEY.encode(), query_string.encode(), hashlib.sha256).hexdigest()
    params["signature"] = signature
    return params

async def get_order_book(symbol):
    """üîπ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
    url = f"{BINANCE_FUTURES_URL}/fapi/v1/depth"
    params = {"symbol": symbol.upper(), "limit": 10}  # –ü–æ–ª—É—á–∞–µ–º 10 –ª—É—á—à–∏—Ö –∑–∞—è–≤–æ–∫

    try:
        response = requests.get(url, params=params)
        data = response.json()
        bids = data["bids"][:5]  # 5 –ª—É—á—à–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É
        asks = data["asks"][:5]  # 5 –ª—É—á—à–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É

        order_book = f"üìä **Order Book {symbol.upper()}**\n\n"
        order_book += "üîπ **–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ (BIDS):**\n"
        for bid in bids:
            order_book += f"üíö {bid[0]} | –ö–æ–ª-–≤–æ: {bid[1]}\n"
        
        order_book += "\nüîª **–ü—Ä–æ–¥–∞–≤—Ü—ã (ASKS):**\n"
        for ask in asks:
            order_book += f"‚ù§Ô∏è {ask[0]} | –ö–æ–ª-–≤–æ: {ask[1]}\n"

        return order_book
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}"

async def start(update: Update, context):
    keyboard = [
        [KeyboardButton("üìä Order Book ADA"), KeyboardButton("üìä Order Book IP")],
        [KeyboardButton("üìä Order Book TST")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_message(update: Update, context):
    text = update.message.text
    if text == "üìä Order Book ADA":
        result = await get_order_book("ADAUSDT")
        await update.message.reply_text(result)
    elif text == "üìä Order Book IP":
        result = await get_order_book("IPUSDT")
        await update.message.reply_text(result)
    elif text == "üìä Order Book TST":
        result = await get_order_book("TSTUSDT")
        await update.message.reply_text(result)
    else:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

async def run_telegram_bot():
    """üîπ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

async def main():
    """üîπ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –∏ Order Book"""
    await run_telegram_bot()

if __name__ == "__main__":
    asyncio.run(main(), debug=True)
