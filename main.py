import asyncio
import json
import os
import websocket
import pandas as pd
from telegram import Bot, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# üîπ API-–∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# üîπ WebSocket Binance Futures
TRADE_PAIRS = ["adausdt", "ipusdt", "tstusdt"]
STREAMS = [f"{pair}@kline_5m" for pair in TRADE_PAIRS]
BINANCE_WS_URL = f"wss://fstream.binance.com/stream?streams=" + "/".join(STREAMS)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
candle_data = {pair: pd.DataFrame(columns=["timestamp", "close"]) for pair in TRADE_PAIRS}

async def send_telegram_message(text):
    """üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    print(f"üì® Telegram: {text}")
    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)

def calculate_rsi(df, period=14):
    """üîπ –†–∞—Å—Å—á–µ—Ç RSI"""
    delta = df["close"].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi.iloc[-1] if not rsi.empty else None

def calculate_sma(df, period=50):
    """üîπ –†–∞—Å—Å—á–µ—Ç SMA"""
    return df["close"].rolling(window=period).mean().iloc[-1] if not df.empty else None

def on_message(ws, message):
    """üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebSocket"""
    data = json.loads(message)

    if "stream" in data and "data" in data:
        stream = data["stream"]
        pair = stream.split("@")[0].upper()
        event_type = stream.split("@")[1]

        if event_type.startswith("kline"):
            # üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–µ—á–µ–π (Kline)
            price = float(data["data"]["k"]["c"])
            timestamp = data["data"]["k"]["t"]
            is_closed = data["data"]["k"]["x"]

            if is_closed:
                df = candle_data[pair]
                new_row = pd.DataFrame({"timestamp": [timestamp], "close": [price]})
                candle_data[pair] = pd.concat([df, new_row], ignore_index=True)

                if len(candle_data[pair]) > 100:
                    candle_data[pair] = candle_data[pair].iloc[-100:]

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                rsi = calculate_rsi(candle_data[pair])
                sma_50 = calculate_sma(candle_data[pair], period=50)
                sma_200 = calculate_sma(candle_data[pair], period=200)

                # –£—Å–ª–æ–≤–∏—è –¥–ª—è –õ–æ–Ω–≥–∞/–®–æ—Ä—Ç–∞
                signal = ""
                take_profit = None
                stop_loss = None

                if rsi and sma_50 and sma_200:
                    if rsi < 30 and sma_50 > sma_200:
                        take_profit = round(price * 1.02, 6)  # +2%
                        stop_loss = round(price * 0.98, 6)  # -2%
                        signal = f"üöÄ **–õ–æ–Ω–≥ {pair}**\nüí∞ –¶–µ–Ω–∞: {price}\nüéØ –¢–µ–π–∫-–ü—Ä–æ—Ñ–∏—Ç: {take_profit}\nüõë –°—Ç–æ–ø-–õ–æ—Å—Å: {stop_loss}\nüìä RSI: {rsi:.2f}"

                    elif rsi > 70 and sma_50 < sma_200:
                        take_profit = round(price * 0.98, 6)  # -2%
                        stop_loss = round(price * 1.02, 6)  # +2%
                        signal = f"‚ö†Ô∏è **–®–æ—Ä—Ç {pair}**\nüí∞ –¶–µ–Ω–∞: {price}\nüéØ –¢–µ–π–∫-–ü—Ä–æ—Ñ–∏—Ç: {take_profit}\nüõë –°—Ç–æ–ø-–õ–æ—Å—Å: {stop_loss}\nüìä RSI: {rsi:.2f}"

                if signal:
                    asyncio.run(send_telegram_message(signal))

def start_websocket():
    """üîπ –ó–∞–ø—É—Å–∫ WebSocket"""
    ws = websocket.WebSocketApp(BINANCE_WS_URL, on_message=on_message)
    ws.run_forever()

async def start(update: Update, context):
    keyboard = [
        [KeyboardButton("üìä –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìã –û—Ä–¥–µ—Ä–∞")],
        [KeyboardButton("üìà –ü–æ–∑–∏—Ü–∏–∏"), KeyboardButton("üì¢ –°–∏–≥–Ω–∞–ª—ã")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_message(update: Update, context):
    text = update.message.text

    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        await update.message.reply_text("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!")

    elif text == "üìã –û—Ä–¥–µ—Ä–∞":
        await update.message.reply_text("‚úÖ –ë–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞!")

    elif text == "üìà –ü–æ–∑–∏—Ü–∏–∏":
        await update.message.reply_text("‚úÖ –ë–æ—Ç —Å–ª–µ–¥–∏—Ç –∑–∞ –ø–æ–∑–∏—Ü–∏—è–º–∏!")

    elif text == "üì¢ –°–∏–≥–Ω–∞–ª—ã":
        await update.message.reply_text("‚úÖ –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ—Ä–≥–æ–≤—ã–µ —Å–∏–≥–Ω–∞–ª—ã!")

    else:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

async def run_telegram_bot():
    """üîπ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

async def main():
    """üîπ –ó–∞–ø—É—Å–∫ WebSocket –∏ Telegram-–±–æ—Ç–∞"""
    loop = asyncio.get_running_loop()
    telegram_task = asyncio.create_task(run_telegram_bot())
    websocket_task = loop.run_in_executor(None, start_websocket)
    await asyncio.gather(telegram_task, websocket_task)

if __name__ == "__main__":
    asyncio.run(main(), debug=True)
