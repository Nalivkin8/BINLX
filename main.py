import asyncio
import json
import os
import websocket
import requests
import pandas as pd
from telegram import Bot
from datetime import datetime
from statistics import mean

# üîπ API-–∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# üîπ –°–ø–∏—Å–æ–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä (–Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä)
TRADE_PAIRS = ["adausdt", "ipusdt", "tstusdt"]

def check_binance_pairs():
    """üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç–æ—Ä–≥—É—é—Ç—Å—è –ª–∏ –ø–∞—Ä—ã –Ω–∞ Binance Futures"""
    print("üîé –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä—ã –Ω–∞ Binance Futures...")
    url = "https://fapi.binance.com/fapi/v1/exchangeInfo"
    
    try:
        response = requests.get(url, timeout=5)
        if response.status_code == 200:
            data = response.json()
            valid_pairs = [
                pair for pair in TRADE_PAIRS 
                if any(symbol["symbol"].lower() == pair for symbol in data["symbols"])
            ]
            if not valid_pairs:
                print("‚ùå –ù–∏ –æ–¥–Ω–∞ –∏–∑ –ø–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ Binance Futures.")
                exit()
            return valid_pairs
        else:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {response.status_code}")
            return []
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
        return []

# üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (—É–±–∏—Ä–∞–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
TRADE_PAIRS = check_binance_pairs()

if not TRADE_PAIRS:
    print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å Binance Futures.")
    exit()

# üîπ WebSocket Binance Futures
STREAMS = [f"{pair}@kline_1m" for pair in TRADE_PAIRS]
BINANCE_WS_URL = f"wss://fstream.binance.com/stream?streams=" + "/".join(STREAMS)

bot = Bot(token=TELEGRAM_BOT_TOKEN)
candle_data = {pair: pd.DataFrame(columns=["timestamp", "close", "volume"]) for pair in TRADE_PAIRS}

def on_message(ws, message):
    """üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebSocket"""
    data = json.loads(message)

    if "stream" in data and "data" in data:
        stream = data["stream"]
        pair = stream.split("@")[0].upper()

        if pair not in TRADE_PAIRS:
            print(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø–∞—Ä—ã: {pair}")
            return

        price = float(data["data"]["k"]["c"])
        timestamp = data["data"]["k"]["t"]
        volume = float(data["data"]["k"]["v"])

        print(f"‚úÖ {pair}: –¶–µ–Ω–∞ {price} | –û–±—ä–µ–º {volume}")

def on_error(ws, error):
    """üîπ –õ–æ–≥ –æ—à–∏–±–æ–∫ WebSocket"""
    print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {error}")

def start_websocket():
    """üîπ –ó–∞–ø—É—Å–∫ WebSocket"""
    print("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance WebSocket...")
    ws = websocket.WebSocketApp(
        BINANCE_WS_URL,
        on_message=on_message,
        on_error=on_error
    )
    ws.run_forever()

async def main():
    """üîπ –ó–∞–ø—É—Å–∫ WebSocket-–±–æ—Ç–∞"""
    loop = asyncio.get_running_loop()
    websocket_task = loop.run_in_executor(None, start_websocket)
    await asyncio.gather(websocket_task)

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    asyncio.run(main(), debug=True)
