import asyncio
import requests
import json
import os
import websocket
import pandas as pd
import numpy as np
from telegram import Bot, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# üîπ API-–∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# üîπ Binance WebSocket URL
TRADE_PAIRS = ["adausdt", "ipusdt", "tstusdt"]
BINANCE_WS_URL = f"wss://fstream.binance.com/stream?streams=" + "/".join([f"{pair}@kline_5m" for pair in TRADE_PAIRS])

# üîπ Binance REST API URL
BINANCE_FUTURES_URL = "https://fapi.binance.com"

bot = Bot(token=TELEGRAM_BOT_TOKEN)
candle_data = {pair: pd.DataFrame(columns=["timestamp", "close"]) for pair in TRADE_PAIRS}

def calculate_rsi(df, period=14):
    """üîπ –†–∞—Å—Å—á–µ—Ç RSI (Relative Strength Index)"""
    delta = df["close"].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi.iloc[-1] if not rsi.empty else None

def calculate_sma(df, period=50):
    """üîπ –†–∞—Å—Å—á–µ—Ç SMA (Simple Moving Average)"""
    return df["close"].rolling(window=period).mean().iloc[-1] if not df.empty else None

async def get_order_book(symbol):
    """üîπ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
    url = f"{BINANCE_FUTURES_URL}/fapi/v1/depth"
    params = {"symbol": symbol.upper(), "limit": 5}
    try:
        response = requests.get(url, params=params)
        data = response.json()
        bids = data["bids"]
        asks = data["asks"]

        order_book = f"üìä **Order Book {symbol.upper()}**\n\n"
        order_book += "üîπ **–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ (BIDS):**\n"
        for bid in bids:
            order_book += f"üíö {bid[0]} | –ö–æ–ª-–≤–æ: {bid[1]}\n"
        
        order_book += "\nüîª **–ü—Ä–æ–¥–∞–≤—Ü—ã (ASKS):**\n"
        for ask in asks:
            order_book += f"‚ù§Ô∏è {ask[0]} | –ö–æ–ª-–≤–æ: {ask[1]}\n"

        return order_book
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}"

async def send_telegram_message(text):
    """üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    print(f"üì® Telegram: {text}")
    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)

def on_message(ws, message):
    """üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebSocket"""
    data = json.loads(message)
    if "stream" in data and "data" in data:
        stream = data["stream"]
        pair = stream.split("@")[0].upper()
        price = float(data["data"]["k"]["c"])
        timestamp = data["data"]["k"]["t"]
        is_closed = data["data"]["k"]["x"]

        print(f"üìä {pair} | –¶–µ–Ω–∞: {price}")

        if is_closed:
            global candle_data
            df = candle_data[pair]
            new_row = pd.DataFrame({"timestamp": [timestamp], "close": [price]})
            candle_data[pair] = pd.concat([df, new_row], ignore_index=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–≤–µ—á–µ–π
            if len(candle_data[pair]) > 100:
                candle_data[pair] = candle_data[pair].iloc[-100:]

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            rsi = calculate_rsi(candle_data[pair])
            sma_50 = calculate_sma(candle_data[pair], period=50)
            sma_200 = calculate_sma(candle_data[pair], period=200)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –õ–æ–Ω–≥/–®–æ—Ä—Ç
            signal = ""
            if rsi and sma_50 and sma_200:
                if rsi < 30 and sma_50 > sma_200:
                    signal = f"üöÄ **–õ–æ–Ω–≥** {pair} | –¶–µ–Ω–∞: {price} | RSI: {rsi:.2f}"
                elif rsi > 70 and sma_50 < sma_200:
                    signal = f"‚ö†Ô∏è **–®–æ—Ä—Ç** {pair} | –¶–µ–Ω–∞: {price} | RSI: {rsi:.2f}"

            if signal:
                asyncio.run(send_telegram_message(signal))

def start_websocket():
    """üîπ –ó–∞–ø—É—Å–∫ WebSocket"""
    ws = websocket.WebSocketApp(BINANCE_WS_URL, on_message=on_message)
    ws.run_forever()

async def start(update: Update, context):
    keyboard = [
        [KeyboardButton("üìà Order Book ADA"), KeyboardButton("üìà Order Book IP")],
        [KeyboardButton("üìà Order Book TST")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_message(update: Update, context):
    text = update.message.text
    if text == "üìà Order Book ADA":
        result = await get_order_book("ADAUSDT")
        await update.message.reply_text(result)
    elif text == "üìà Order Book IP":
        result = await get_order_book("IPUSDT")
        await update.message.reply_text(result)
    elif text == "üìà Order Book TST":
        result = await get_order_book("TSTUSDT")
        await update.message.reply_text(result)
    else:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

async def run_telegram_bot():
    """üîπ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

async def main():
    """üîπ –ó–∞–ø—É—Å–∫ WebSocket –∏ Telegram-–±–æ—Ç–∞"""
    loop = asyncio.get_running_loop()
    telegram_task = asyncio.create_task(run_telegram_bot())
    websocket_task = loop.run_in_executor(None, start_websocket)
    await asyncio.gather(telegram_task, websocket_task)

if __name__ == "__main__":
    asyncio.run(main(), debug=True)
