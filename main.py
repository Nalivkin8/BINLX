import asyncio
import threading
import websocket
import json
import numpy as np
import os
import schedule
import time
from telegram import Bot
import ccxt  

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ Railway Variables
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–µ–π
if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
    print("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã!")
    exit()
if not BINANCE_API_KEY or not BINANCE_SECRET_KEY:
    print("‚ùå –û—à–∏–±–∫–∞: BINANCE API-–∫–ª—é—á–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã!")
    exit()

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance
try:
    exchange = ccxt.binance({
        'apiKey': BINANCE_API_KEY,
        'secret': BINANCE_SECRET_KEY,
        'options': {'defaultType': 'future'}
    })
    print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Binance: {e}")
    exit()

# üîπ Telegram-–±–æ—Ç
bot = Bot(token=TELEGRAM_BOT_TOKEN)

# üîπ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
async def send_telegram_message(text):
    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram)
asyncio.run(send_telegram_message("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!"))

# üîπ –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
TRADE_PAIRS = ["btcusdt", "ethusdt", "solusdt", "xrpusdt", "adausdt", "dotusdt", "maticusdt", "bnbusdt", "linkusdt", "ipusdt", "tstusdt"]

# üîπ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
candle_data = {pair: [] for pair in TRADE_PAIRS}

# üîπ –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä
STREAMS = "/".join([f"{pair}@kline_15m" for pair in TRADE_PAIRS])
BINANCE_WS_URL = f"wss://fstream.binance.com/stream?streams={STREAMS}"

# üîπ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–¥–µ–ª–æ–∫
daily_trades = 0
total_profit_loss = 0

# üîπ WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
def on_open(ws):
    print("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á—ë–Ω!")

def on_close(ws, close_status_code, close_msg):
    print("‚ùå WebSocket –∑–∞–∫—Ä—ã—Ç! –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
    time.sleep(5)
    ws.run_forever()

def on_error(ws, error):
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ WebSocket: {error}")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö WebSocket
def on_message(ws, message):
    global daily_trades, total_profit_loss
    data = json.loads(message)
    
    if "stream" in data and "data" in data:
        stream = data["stream"]
        pair = stream.split("@")[0].upper()
        kline = data["data"]["k"]
        price = float(kline["c"])
        is_closed = kline["x"]

        print(f"üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {pair} | –¶–µ–Ω–∞: {price}")

        if is_closed:
            candle_data[pair].append(price)

            if len(candle_data[pair]) > 50:
                candle_data[pair].pop(0)

            # üìà RSI
            rsi = calculate_rsi(candle_data[pair])
            
            if rsi is None:
                return

            print(f"üìä {pair} RSI: {rsi}")

            # üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –ø—Ä–∏ –Ω—É–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö
            if rsi < 30:
                message = f"üöÄ –õ–æ–Ω–≥ {pair}!\n–¶–µ–Ω–∞: {price}\nRSI: {rsi}"
                asyncio.run(send_telegram_message(message))
            elif rsi > 70:
                message = f"‚ö†Ô∏è –®–æ—Ä—Ç {pair}!\n–¶–µ–Ω–∞: {price}\nRSI: {rsi}"
                asyncio.run(send_telegram_message(message))

# üîπ –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ RSI
def calculate_rsi(prices, period=14):
    if len(prices) < period:
        return None
    delta = np.diff(prices)
    gain = np.where(delta > 0, delta, 0)
    loss = np.where(delta < 0, -delta, 0)
    avg_gain = np.mean(gain[-period:])
    avg_loss = np.mean(loss[-period:])
    rs = avg_gain / avg_loss if avg_loss != 0 else 0
    rsi = 100 - (100 / (1 + rs))
    return round(rsi, 2)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞
def get_balance():
    try:
        balance_info = exchange.fetch_balance()
        balance = balance_info['total']['USDT'] if 'USDT' in balance_info['total'] else 0
        return round(balance, 2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0

# üîπ –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç –≤ Telegram
def daily_report():
    balance = get_balance()
    report = f"üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç\nüîπ –ë–∞–ª–∞–Ω—Å: {balance} USDT\nüîπ –°–¥–µ–ª–æ–∫ –∑–∞ —Å—É—Ç–∫–∏: {daily_trades}\nüîπ –û–±—â–∏–π P/L: {round(total_profit_loss, 2)} USDT"
    asyncio.run(send_telegram_message(report))
    print("‚úÖ –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

schedule.every().day.at("00:00").do(daily_report)

# üîπ –ó–∞–ø—É—Å–∫ WebSocket
def start_websocket():
    ws = websocket.WebSocketApp(
        BINANCE_WS_URL,
        on_open=on_open,
        on_close=on_close,
        on_error=on_error,
        on_message=on_message
    )
    ws.run_forever()

# –ó–∞–ø—É—Å–∫ WebSocket –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
threading.Thread(target=start_websocket).start()
