import asyncio
import requests
import json
import os
import hmac
import hashlib
import time
import websocket
from urllib.parse import urlencode
from telegram import Bot, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters
import numpy as np

# üîπ API-–∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# üîπ Binance API URL
BINANCE_FUTURES_URL = "https://fapi.binance.com"

# üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–µ–π
if not all([TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, BINANCE_API_KEY, BINANCE_SECRET_KEY]):
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ –≤—Å–µ API-–∫–ª—é—á–∏ –∑–∞–¥–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit()

bot = Bot(token=TELEGRAM_BOT_TOKEN)

def sign_request(params):
    """–°–æ–∑–¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è Binance API"""
    query_string = urlencode(params)
    signature = hmac.new(BINANCE_SECRET_KEY.encode(), query_string.encode(), hashlib.sha256).hexdigest()
    params["signature"] = signature
    return params

async def send_telegram_message(text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    print(f"üì® Telegram: {text}")
    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)

async def get_balance():
    """–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –∏ PnL"""
    url = f"{BINANCE_FUTURES_URL}/fapi/v2/account"
    headers = {"X-MBX-APIKEY": BINANCE_API_KEY}
    params = sign_request({"timestamp": int(time.time() * 1000)})

    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        balance = float(data["totalWalletBalance"])
        unrealized_pnl = float(data["totalUnrealizedProfit"])
        return balance, unrealized_pnl
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0, 0

async def show_balance(update: Update, context):
    balance, pnl = await get_balance()
    await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} USDT\nüìà PnL: {pnl} USDT")

async def get_open_positions():
    """–ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    url = f"{BINANCE_FUTURES_URL}/fapi/v2/positionRisk"
    headers = {"X-MBX-APIKEY": BINANCE_API_KEY}
    params = sign_request({"timestamp": int(time.time() * 1000)})

    try:
        response = requests.get(url, headers=headers, params=params)
        positions = response.json()
        open_positions = [p for p in positions if float(p['positionAmt']) != 0]

        if not open_positions:
            return "üìå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"

        report = "üìä –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:\n"
        for pos in open_positions:
            report += f"üîπ {pos['symbol']}: {pos['positionAmt']} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤\nPnL: {round(float(pos['unRealizedProfit']), 2)} USDT\n\n"
        return report
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π"

async def show_positions(update: Update, context):
    positions = await get_open_positions()
    await update.message.reply_text(positions)

async def start(update: Update, context):
    keyboard = [[KeyboardButton("üìä –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìà –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_message(update: Update, context):
    text = update.message.text
    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        await show_balance(update, context)
    elif text == "üìà –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏":
        await show_positions(update, context)
    else:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

async def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

# üîπ WebSocket Binance Futures
TRADE_PAIRS = ["adausdt", "ipusdt", "tstusdt"]
BINANCE_WS_URL = f"wss://fstream.binance.com/stream?streams=" + "/".join([f"{pair}@kline_5m" for pair in TRADE_PAIRS])
candle_data = {pair: [] for pair in TRADE_PAIRS}

def calculate_rsi(prices, period=14):
    if len(prices) < period:
        return None
    delta = np.diff(prices)
    gain = np.where(delta > 0, delta, 0)
    loss = np.where(delta < 0, -delta, 0)
    avg_gain = np.mean(gain[-period:])
    avg_loss = np.mean(loss[-period:])
    
    if avg_loss == 0:
        return 100
    if avg_gain == 0:
        return 0
    
    rs = avg_gain / avg_loss
    return round(100 - (100 / (1 + rs)), 2)

def on_message(ws, message):
    data = json.loads(message)
    if "stream" in data and "data" in data:
        stream = data["stream"]
        pair = stream.split("@")[0].upper()
        price = float(data["data"]["k"]["c"])
        is_closed = data["data"]["k"]["x"]

        print(f"üìä {pair} | –¶–µ–Ω–∞: {price}")

        if is_closed:
            candle_data[pair].append(price)

            if len(candle_data[pair]) > 50:
                candle_data[pair].pop(0)

            rsi = calculate_rsi(candle_data[pair])
            if rsi is not None:
                print(f"üìä {pair} RSI: {rsi}")
                if rsi < 30:
                    asyncio.run(send_telegram_message(f"üöÄ –õ–æ–Ω–≥ {pair}!\n–¶–µ–Ω–∞: {price}\nRSI: {rsi}"))
                elif rsi > 70:
                    asyncio.run(send_telegram_message(f"‚ö†Ô∏è –®–æ—Ä—Ç {pair}!\n–¶–µ–Ω–∞: {price}\nRSI: {rsi}"))

async def start_websocket():
    ws = websocket.WebSocketApp(BINANCE_WS_URL, on_message=on_message)
    ws.run_forever()

async def main():
    asyncio.create_task(run_telegram_bot())
    await start_websocket()

if __name__ == "__main__":
    asyncio.run(main())
