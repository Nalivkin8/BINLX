import ccxt
import time
import os
import pandas as pd
from telegram import Bot
from dotenv import load_dotenv

print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ .env (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ)
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway
# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏ –∏–∑ Railway
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")  # ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

if not BINANCE_API_KEY or not BINANCE_SECRET_KEY:
    raise Exception("‚ùå –û—à–∏–±–∫–∞: API-–∫–ª—é—á–∏ Binance –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Railway.")

print("‚úÖ API-–∫–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")

# –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã (—Ñ—å—é—á–µ—Ä—Å—ã)
TRADE_PAIRS = ["BTC/USDT", "ETH/USDT", "SOL/USDT", "XRP/USDT"]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance Futures API (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)
exchange = ccxt.binance({
    'apiKey': BINANCE_API_KEY,
    'secret': BINANCE_SECRET_KEY,
    'enableRateLimit': True,
    'options': {
        'defaultType': 'future',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ—å—é—á–µ—Ä—Å—ã
        'adjustForTimeDifference': True
    },
    'urls': {
        'api': 'https://fapi.binance.com'  # ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π API Binance Futures
    }
})



print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance...")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä—ã–Ω–∫–∞
def get_market_data(symbol, timeframe="15m"):
    try:
        print(f"üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è {symbol}...")
        candles = exchange.fetch_ohlcv(symbol, timeframe, limit=50)
        df = pd.DataFrame(candles, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['close'] = df['close'].astype(float)
        return df
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {str(e)}")
        return None

# –†–∞—Å—á–µ—Ç RSI
def calculate_rsi(df, period=14):
    if df is None:
        return None
    delta = df['close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return round(rsi.iloc[-1], 2)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram
def send_signal(message):
    try:
        print(f"üì© –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram: {message}")
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {str(e)}")

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞
def monitor_market():
    print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä—ã–Ω–∫–∞...")
    while True:
        for pair in TRADE_PAIRS:
            df = get_market_data(pair)
            if df is None:
                continue

            rsi = calculate_rsi(df)
            if rsi is None:
                continue

            last_price = df['close'].iloc[-1]
            message = f"RSI {pair}: {rsi} | –¶–µ–Ω–∞: {last_price}"

            print(f"üìä {message}")

            if rsi < 30:
                send_signal(f"üöÄ –õ–æ–Ω–≥ –Ω–∞ {pair}!\n–¶–µ–Ω–∞: {last_price}\nRSI: {rsi} (–ü–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å!)")
            elif rsi > 70:
                send_signal(f"‚ö†Ô∏è –®–æ—Ä—Ç –Ω–∞ {pair}!\n–¶–µ–Ω–∞: {last_price}\nRSI: {rsi} (–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å!)")

        print("‚è≥ –ñ–¥—É 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∞–Ω–∞–ª–∏–∑–æ–º...")
        time.sleep(60)

# –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
monitor_market()
