import asyncio
import requests
import json
import os
import hmac
import hashlib
import time
import websocket
from urllib.parse import urlencode
from telegram import Bot, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# üîπ API-–∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# üîπ Binance API URL
BINANCE_FUTURES_URL = "https://fapi.binance.com"

# üîπ –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–¥–≤–∏–≥ (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
SERVER_TIME_OFFSET = 0

# üîπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—ã
TRADE_PAIRS = ["ADAUSDT", "IPUSDT", "TSTUSDT"]

bot = Bot(token=TELEGRAM_BOT_TOKEN)

def get_binance_time():
    """üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ Binance"""
    global SERVER_TIME_OFFSET
    url = f"{BINANCE_FUTURES_URL}/fapi/v1/time"
    
    try:
        response = requests.get(url)
        server_time = response.json()["serverTime"]
        local_time = int(time.time() * 1000)
        SERVER_TIME_OFFSET = server_time - local_time
        print(f"‚úÖ –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –°–º–µ—â–µ–Ω–∏–µ: {SERVER_TIME_OFFSET} –º—Å")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ Binance: {e}")

def sign_request(params):
    """üîπ –°–æ–∑–¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è Binance API"""
    params["timestamp"] = int(time.time() * 1000) + SERVER_TIME_OFFSET
    query_string = urlencode(params)
    signature = hmac.new(BINANCE_SECRET_KEY.encode(), query_string.encode(), hashlib.sha256).hexdigest()
    params["signature"] = signature
    return params

async def get_exchange_info():
    """üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏—Ä–∂–µ (—Å–ø–∏—Å–æ–∫ –ø–∞—Ä, –ª–∏–º–∏—Ç—ã)"""
    url = f"{BINANCE_FUTURES_URL}/fapi/v1/exchangeInfo"
    
    try:
        response = requests.get(url)
        data = response.json()

        available_pairs = {s["symbol"]: s for s in data["symbols"]}

        report = "üìä **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä–∞—Ö**:\n"
        for pair in TRADE_PAIRS:
            if pair in available_pairs:
                symbol_info = available_pairs[pair]
                min_qty = symbol_info["filters"][1]["minQty"]
                tick_size = symbol_info["filters"][0]["tickSize"]
                max_leverage = symbol_info["filters"][6]["maxLeverage"]

                report += f"\nüîπ **{pair}**:\n"
                report += f"üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä: {min_qty}\n"
                report += f"üí∞ –®–∞–≥ —Ü–µ–Ω—ã: {tick_size}\n"
                report += f"‚ö° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–µ—á–æ: {max_leverage}x\n"
            else:
                report += f"\n‚ùå {pair} **–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ Binance Futures**\n"

        return report
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏—Ä–∂–µ: {e}"

async def start(update: Update, context):
    keyboard = [
        [KeyboardButton("üìä –ò–Ω—Ñ–æ –æ –ø–∞—Ä–∞—Ö"), KeyboardButton("üìà –ë–∞–ª–∞–Ω—Å")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_message(update: Update, context):
    text = update.message.text
    if text == "üìä –ò–Ω—Ñ–æ –æ –ø–∞—Ä–∞—Ö":
        result = await get_exchange_info()
        await update.message.reply_text(result)
    elif text == "üìà –ë–∞–ª–∞–Ω—Å":
        result = "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        await update.message.reply_text(result)
    else:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

async def run_telegram_bot():
    """üîπ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

async def main():
    """üîπ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏—Ä–∂–µ"""
    get_binance_time()  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ Binance
    await run_telegram_bot()

if __name__ == "__main__":
    asyncio.run(main(), debug=True)
