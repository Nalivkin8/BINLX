import asyncio
import requests
import json
import os
import hmac
import hashlib
import time
import websocket
from urllib.parse import urlencode
from telegram import Bot, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# üîπ API-–∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# üîπ Binance API URL
BINANCE_FUTURES_URL = "https://fapi.binance.com"

# üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Binance API
bot = Bot(token=TELEGRAM_BOT_TOKEN)

def sign_request(params):
    """–°–æ–∑–¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è Binance API"""
    query_string = urlencode(params)
    signature = hmac.new(BINANCE_SECRET_KEY.encode(), query_string.encode(), hashlib.sha256).hexdigest()
    params["signature"] = signature
    return params

async def send_telegram_message(text):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    print(f"üì® Telegram: {text}")
    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)

async def get_balance():
    """–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –∏ PnL"""
    url = f"{BINANCE_FUTURES_URL}/fapi/v2/account"
    headers = {"X-MBX-APIKEY": BINANCE_API_KEY}
    params = sign_request({"timestamp": int(time.time() * 1000)})

    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        balance = float(data["totalWalletBalance"])
        unrealized_pnl = float(data["totalUnrealizedProfit"])
        return balance, unrealized_pnl
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0, 0

async def show_balance(update: Update, context):
    balance, pnl = await get_balance()
    await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} USDT\nüìà PnL: {pnl} USDT")

async def get_open_positions():
    """–ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    url = f"{BINANCE_FUTURES_URL}/fapi/v2/positionRisk"
    headers = {"X-MBX-APIKEY": BINANCE_API_KEY}
    params = sign_request({"timestamp": int(time.time() * 1000)})

    try:
        response = requests.get(url, headers=headers, params=params)
        positions = response.json()
        open_positions = [p for p in positions if float(p['positionAmt']) != 0]

        if not open_positions:
            return "üìå –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"

        report = "üìä –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:\n"
        for pos in open_positions:
            report += f"üîπ {pos['symbol']}: {pos['positionAmt']} –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤\nPnL: {round(float(pos['unRealizedProfit']), 2)} USDT\n\n"
        return report
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π"

async def show_positions(update: Update, context):
    positions = await get_open_positions()
    await update.message.reply_text(positions)

async def start(update: Update, context):
    keyboard = [[KeyboardButton("üìä –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìà –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_message(update: Update, context):
    text = update.message.text
    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        await show_balance(update, context)
    elif text == "üìà –û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏":
        await show_positions(update, context)
    else:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

async def run_telegram_bot():
    """–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

async def main():
    await run_telegram_bot()

if __name__ == "__main__":
    asyncio.run(main())
