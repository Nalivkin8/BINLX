import asyncio
import json
import os
import requests
import websocket
import hmac
import hashlib
from urllib.parse import urlencode
from telegram import Bot, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# üîπ API-–∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# üîπ Binance Futures API URL
BINANCE_FUTURES_URL = "https://fapi.binance.com"
LISTEN_KEY_URL = f"{BINANCE_FUTURES_URL}/fapi/v1/listenKey"
ACCOUNT_WS_URL = None  # WebSocket URL –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è listenKey

bot = Bot(token=TELEGRAM_BOT_TOKEN)

async def send_telegram_message(text):
    """üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    print(f"üì® Telegram: {text}")
    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)

def get_listen_key():
    """üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ listenKey –¥–ª—è Binance Futures WebSocket"""
    headers = {"X-MBX-APIKEY": BINANCE_API_KEY}
    response = requests.post(LISTEN_KEY_URL, headers=headers)

    if response.status_code == 200:
        listen_key = response.json()["listenKey"]
        global ACCOUNT_WS_URL
        ACCOUNT_WS_URL = f"wss://fstream.binance.com/ws/{listen_key}"
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω listenKey: {listen_key}")
        return listen_key
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è listenKey: {response.json()}")
        return None

def keep_alive_listen_key():
    """üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ listenKey –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç"""
    headers = {"X-MBX-APIKEY": BINANCE_API_KEY}
    while True:
        try:
            requests.put(LISTEN_KEY_URL, headers=headers)
            print("üîÑ ListenKey –æ–±–Ω–æ–≤–ª–µ–Ω!")
            asyncio.run(send_telegram_message("üîÑ ListenKey –æ–±–Ω–æ–≤–ª–µ–Ω!"))
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è listenKey: {e}")
        asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç

def on_message(ws, message):
    """üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebSocket"""
    data = json.loads(message)

    if "e" in data:
        event_type = data["e"]

        if event_type == "ACCOUNT_UPDATE":
            # üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –ø–æ–∑–∏—Ü–∏–π
            balances = data["a"]["B"]
            positions = data["a"]["P"]

            message = "üìä **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ Binance Futures**\n\n"
            message += "üí∞ **–ë–∞–ª–∞–Ω—Å:**\n"
            for balance in balances:
                asset = balance["a"]
                wallet_balance = balance["wb"]
                message += f"üíé {asset}: {wallet_balance}\n"

            message += "\nüìà **–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏:**\n"
            for position in positions:
                symbol = position["s"]
                position_amount = position["pa"]
                unrealized_pnl = position["up"]
                message += f"üìä {symbol} | –ö–æ–ª-–≤–æ: {position_amount} | PnL: {unrealized_pnl}\n"

            asyncio.run(send_telegram_message(message))

        elif event_type == "ORDER_TRADE_UPDATE":
            # üìå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
            order = data["o"]
            symbol = order["s"]
            order_id = order["i"]
            status = order["X"]
            side = "üü¢ –õ–æ–Ω–≥" if order["S"] == "BUY" else "üî¥ –®–æ—Ä—Ç"
            price = order["p"]
            amount = order["q"]

            message = f"üìå **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞**\n\n"
            message += f"üìä {symbol} | {side}\n"
            message += f"üí∞ –¶–µ–Ω–∞: {price} | –ö–æ–ª-–≤–æ: {amount}\n"
            message += f"üìã –°—Ç–∞—Ç—É—Å: {status}\n"

            asyncio.run(send_telegram_message(message))

        elif event_type == "MARGIN_CALL":
            # ‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ–º –∑–≤–æ–Ω–∫–µ
            message = f"‚ö†Ô∏è **–ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω—ã–π –∑–≤–æ–Ω–æ–∫!**\n"
            message += f"–í–Ω–∏–º–∞–Ω–∏–µ! –ë–∞–ª–∞–Ω—Å –ø–æ –º–∞—Ä–∂–µ –ø–∞–¥–∞–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏—è!"

            asyncio.run(send_telegram_message(message))

def start_account_websocket():
    """üîπ –ó–∞–ø—É—Å–∫ WebSocket Binance Futures Account"""
    global ACCOUNT_WS_URL
    listen_key = get_listen_key()
    if listen_key:
        ws = websocket.WebSocketApp(ACCOUNT_WS_URL, on_message=on_message)
        ws.run_forever()
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket Account!")

async def start(update: Update, context):
    keyboard = [
        [KeyboardButton("üìä –ë–∞–ª–∞–Ω—Å"), KeyboardButton("üìã –û—Ä–¥–µ—Ä—ã")],
        [KeyboardButton("üìà –ü–æ–∑–∏—Ü–∏–∏"), KeyboardButton("‚ö†Ô∏è –ú–∞—Ä–∂–∞")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_message(update: Update, context):
    text = update.message.text

    if text == "üìä –ë–∞–ª–∞–Ω—Å":
        get_listen_key()
        await update.message.reply_text("‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —á–µ—Ä–µ–∑ WebSocket!")

    elif text == "üìã –û—Ä–¥–µ—Ä—ã":
        get_listen_key()
        await update.message.reply_text("‚úÖ –û—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ä–¥–µ—Ä–∞ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!")

    elif text == "üìà –ü–æ–∑–∏—Ü–∏–∏":
        get_listen_key()
        await update.message.reply_text("‚úÖ –ü–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ WebSocket!")

    elif text == "‚ö†Ô∏è –ú–∞—Ä–∂–∞":
        get_listen_key()
        await update.message.reply_text("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–ª–µ–¥–∏—Ç –∑–∞ –º–∞—Ä–∂–æ–π!")

    else:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

async def run_telegram_bot():
    """üîπ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

async def main():
    """üîπ –ó–∞–ø—É—Å–∫ WebSocket –∏ Telegram-–±–æ—Ç–∞"""
    loop = asyncio.get_running_loop()
    telegram_task = asyncio.create_task(run_telegram_bot())
    websocket_task = loop.run_in_executor(None, start_account_websocket)
    keep_alive_task = loop.run_in_executor(None, keep_alive_listen_key)
    await asyncio.gather(telegram_task, websocket_task, keep_alive_task)

if __name__ == "__main__":
    asyncio.run(main(), debug=True)
