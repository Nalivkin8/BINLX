import asyncio
import requests
import json
import os
import hmac
import hashlib
import time
import websocket
from urllib.parse import urlencode
from telegram import Bot, Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters

# üîπ API-–∫–ª—é—á–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_SECRET_KEY = os.getenv("BINANCE_SECRET_KEY")

# üîπ Binance API URL
BINANCE_FUTURES_URL = "https://fapi.binance.com"

# üîπ –í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–¥–≤–∏–≥ (–±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
SERVER_TIME_OFFSET = 0

# üîπ WebSocket URL
TRADE_PAIRS = ["adausdt", "ipusdt", "tstusdt"]
BINANCE_WS_URL = f"wss://fstream.binance.com/stream?streams=" + "/".join([f"{pair}@kline_5m" for pair in TRADE_PAIRS])

bot = Bot(token=TELEGRAM_BOT_TOKEN)

def get_binance_time():
    """üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ Binance –∏ —Ä–∞—Å—á—ë—Ç —Å–º–µ—â–µ–Ω–∏—è"""
    global SERVER_TIME_OFFSET
    url = f"{BINANCE_FUTURES_URL}/fapi/v1/time"
    
    try:
        response = requests.get(url)
        server_time = response.json()["serverTime"]
        local_time = int(time.time() * 1000)
        SERVER_TIME_OFFSET = server_time - local_time
        print(f"‚úÖ –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ! –°–º–µ—â–µ–Ω–∏–µ: {SERVER_TIME_OFFSET} –º—Å")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ Binance: {e}")

def sign_request(params):
    """üîπ –°–æ–∑–¥–∞—ë—Ç –ø–æ–¥–ø–∏—Å—å –¥–ª—è Binance API"""
    params["timestamp"] = int(time.time() * 1000) + SERVER_TIME_OFFSET
    query_string = urlencode(params)
    signature = hmac.new(BINANCE_SECRET_KEY.encode(), query_string.encode(), hashlib.sha256).hexdigest()
    params["signature"] = signature
    return params

async def send_telegram_message(text):
    """üîπ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram"""
    print(f"üì® Telegram: {text}")
    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=text)

async def get_order_book(symbol):
    """üîπ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤"""
    url = f"{BINANCE_FUTURES_URL}/fapi/v1/depth"
    params = {"symbol": symbol.upper(), "limit": 10}

    try:
        response = requests.get(url, params=params)
        data = response.json()
        bids = data["bids"][:5]
        asks = data["asks"][:5]

        order_book = f"üìä Order Book {symbol.upper()}:\n\n"
        order_book += "üîπ **–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ (Bids):**\n"
        for bid in bids:
            order_book += f"–¶–µ–Ω–∞: {bid[0]} | –ö–æ–ª-–≤–æ: {bid[1]}\n"
        
        order_book += "\nüîª **–ü—Ä–æ–¥–∞–≤—Ü—ã (Asks):**\n"
        for ask in asks:
            order_book += f"–¶–µ–Ω–∞: {ask[0]} | –ö–æ–ª-–≤–æ: {ask[1]}\n"

        return order_book
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞–∫–∞–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤: {e}"

async def start(update: Update, context):
    keyboard = [
        [KeyboardButton("üìä Order Book ADA"), KeyboardButton("üìà –°–¥–µ–ª–∫–∏ ADA")],
        [KeyboardButton("üìä Order Book IP"), KeyboardButton("üìà –°–¥–µ–ª–∫–∏ IP")],
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def handle_message(update: Update, context):
    text = update.message.text
    if text == "üìä Order Book ADA":
        result = await get_order_book("ADAUSDT")
        await update.message.reply_text(result)
    elif text == "üìä Order Book IP":
        result = await get_order_book("IPUSDT")
        await update.message.reply_text(result)
    else:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞")

async def run_telegram_bot():
    """üîπ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞"""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("‚úÖ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await application.run_polling()

def start_websocket():
    """üîπ –ó–∞–ø—É—Å–∫ WebSocket"""
    ws = websocket.WebSocketApp(BINANCE_WS_URL)
    ws.run_forever()

async def main():
    """üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ WebSocket –≤ –æ–¥–Ω–æ–º event loop"""
    loop = asyncio.get_running_loop()

    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å Binance –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    get_binance_time()
    
    # Telegram-–±–æ—Ç –∏ WebSocket —Ä–∞–±–æ—Ç–∞—é—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    telegram_task = asyncio.create_task(run_telegram_bot())
    websocket_task = loop.run_in_executor(None, start_websocket)

    await asyncio.gather(telegram_task, websocket_task)

if __name__ == "__main__":
    asyncio.run(main(), debug=True)
